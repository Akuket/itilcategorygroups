// Chosen, a Select Box Enhancer for JavaScript
// by Patrick Filler for Harvest, http://getharvest.com
//
// Version 0.13.0
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `grunt build`, do not edit it by hand.
(function() {
  var AbstractChosen, DOM, Events, SelectParser, Util, emulated_event_mapped_to, emulated_events, is_emulated_event, temp_el, unwrap_emulated_event, wrap_emulated_event, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Util = {
    camel_case: function(string) {
      return string.replace(/-([a-z])/g, function(match) {
        return match[1].toUpperCase();
      });
    }
  };

  if (String.prototype.trim != null) {
    Util.trim = function(string) {
      return string.trim();
    };
  } else {
    Util.trim = function(string) {
      return string.replace(/^\s+|\s+$/g, '');
    };
  }

  temp_el = document.createElement('div');

  DOM = {
    find_parent: function(el, check) {
      var result;
      result = DOM.find_traversal(el, 'parentNode', function(el) {
        return el === document || check(el);
      });
      if (result === document) {
        return null;
      } else {
        return result;
      }
    },
    find_next_sibling: function(el, check) {
      return DOM.find_traversal(el, 'nextSibling', check);
    },
    find_prev_sibling: function(el, check) {
      return DOM.find_traversal(el, 'previousSibling', check);
    },
    find_traversal: function(el, property, check) {
      var current;
      current = el[property];
      while (!(current === null || check(current))) {
        current = current[property];
      }
      return current;
    }
  };

  if ('classList' in temp_el) {
    DOM.has_class = function(el, class_name) {
      return el.classList.contains(class_name);
    };
    DOM.add_class = function(el, class_name) {
      return el.classList.add(class_name);
    };
    DOM.remove_class = function(el, class_name) {
      return el.classList.remove(class_name);
    };
  } else {
    DOM.has_class = function(el, class_name) {
      return (" " + (el.className.toUpperCase()) + " ").indexOf(" " + (class_name.toUpperCase()) + " ") > -1;
    };
    DOM.add_class = function(el, class_name) {
      if (!DOM.has_class(el, class_name)) {
        return el.className += " " + class_name;
      }
    };
    DOM.remove_class = function(el, class_name) {
      return el.className = Util.trim((" " + el.className + " ").replace(" " + class_name, ""));
    };
  }

  if ('getComputedStyle' in window) {
    DOM.get_style = function(el, prop) {
      return window.getComputedStyle(el, null).getPropertyValue(prop);
    };
  } else if ('currentStyle' in temp_el) {
    DOM.get_style = function(el, prop) {
      return el.currentStyle[Util.camel_case(prop)];
    };
  } else {
    DOM.get_style = function(el, prop) {
      return "";
    };
  }

  temp_el = null;

  Events = {};

  if (document.addEventListener != null) {
    Events.add = function(el, type, fn) {
      if (is_emulated_event(type)) {
        fn = wrap_emulated_event(el, type, fn);
        type = emulated_event_mapped_to(type);
      }
      return el.addEventListener(type, fn, false);
    };
    Events.remove = function(el, type, fn) {
      if (is_emulated_event(type)) {
        fn = unwrap_emulated_event(el, type, fn);
        type = emulated_event_mapped_to(type);
      }
      return el.removeEventListener(type, fn, false);
    };
  } else if (document.attachEvent != null) {
    Events.add = function(el, type, fn) {
      var handler;
      handler = el['eventhandler' + type + fn] = function() {
        var evt;
        evt = window.event;
        evt.target = evt.srcElement;
        evt.currentTarget = el;
        evt.preventDefault = function() {
          return evt.returnValue = false;
        };
        evt.stopPropagation = function() {
          return evt.cancelBubble = true;
        };
        return fn.call(el, evt);
      };
      return el.attachEvent('on' + type, handler);
    };
    Events.remove = function(el, type, fn) {
      var handler;
      handler = el['eventhandler' + type + fn];
      el.detachEvent('on' + type, handler);
      return el['eventhandler' + type + fn] = null;
    };
  }

  if (document.createEvent != null) {
    Events.fire = function(el, type, memo) {
      var event;
      if (memo == null) {
        memo = {};
      }
      event = document.createEvent("HTMLEvents");
      event.initEvent(type, true, true);
      event.eventName = type;
      event.memo = memo;
      return el.dispatchEvent(event);
    };
  } else if (document.createEventObject != null) {
    Events.fire = function(el, type, memo) {
      var event;
      if (memo == null) {
        memo = {};
      }
      if (type.indexOf(':') > -1) {
        return;
      }
      event = document.createEventObject();
      event.eventType = type;
      event.eventName = type;
      event.memo = memo;
      return el.fireEvent("on" + type, event);
    };
  }

  is_emulated_event = function(type) {
    return emulated_events[type] != null;
  };

  emulated_event_mapped_to = function(type) {
    return emulated_events[type].mapped_to;
  };

  wrap_emulated_event = function(el, type, fn) {
    var wrapped_fn_key;
    wrapped_fn_key = "" + type + "_" + fn;
    if (el._chosen_wrapped == null) {
      el._chosen_wrapped = {};
    }
    if (el._chosen_wrapped[wrapped_fn_key] == null) {
      el._chosen_wrapped[wrapped_fn_key] = emulated_events[type].handler(el, fn);
    }
    return el._chosen_wrapped[wrapped_fn_key];
  };

  unwrap_emulated_event = function(el, type, fn) {
    var wrapped_fn, wrapped_fn_key;
    wrapped_fn_key = "" + type + "_" + fn;
    wrapped_fn = wrap_emulated_event(el, type, fn);
    el._chosen_wrapped[wrapped_fn_key] = null;
    return wrapped_fn;
  };

  emulated_events = {
    mouseenter: {
      mapped_to: 'mouseover',
      handler: function(original_el, fn) {
        return function(evt) {
          if (original_el === evt.relatedTarget || ((evt.relatedTarget != null) && DOM.find_parent(evt.relatedTarget, function(el) {
            return el === original_el;
          }))) {
            return;
          }
          return fn.call(this, evt);
        };
      }
    }
  };

  emulated_events.mouseleave = {
    mapped_to: 'mouseout',
    handler: emulated_events.mouseenter.handler
  };

  SelectParser = (function() {
    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName.toUpperCase() === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: this.escapeExpression(group.label),
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName.toUpperCase() === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    SelectParser.prototype.escapeExpression = function(text) {
      var map, unsafe_chars;
      if ((text == null) || text === false) {
        return "";
      }
      if (!/[\&\<\>\"\'\`]/.test(text)) {
        return text;
      }
      map = {
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#x27;",
        "`": "&#x60;"
      };
      unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
      return text.replace(unsafe_chars, function(chr) {
        return map[chr] || "&amp;";
      });
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  AbstractChosen = (function() {
    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      if (!AbstractChosen.browser_is_supported()) {
        return;
      }
      this.is_multiple = this.form_field.multiple;
      this.set_default_text();
      this.set_default_values();
      this.setup();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.disable_search = this.options.disable_search || false;
      this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
      this.group_search = this.options.group_search != null ? this.options.group_search : true;
      this.search_contains = this.options.search_contains || false;
      this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      return this.inherit_select_classes = this.options.inherit_select_classes || false;
    };

    AbstractChosen.prototype.set_default_text = function() {
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (this.is_multiple) {
        if (!this.active_field) {
          return setTimeout((function() {
            return _this.container_mousedown();
          }), 50);
        }
      } else {
        if (!this.active_field) {
          return this.activate_field();
        }
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.results_option_build = function(options) {
      var content, data, _i, _len, _ref;
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group && (data.search_match || data.group_match)) {
          content += this.result_add_group(data);
        } else if (!data.empty && data.search_match) {
          content += this.result_add_option(data);
        }
        if (options != null ? options.first : void 0) {
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.single_set_selected_text(data.text);
          }
        }
      }
      return content;
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      classes = [];
      if (!option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("active-result");
      }
      if (option.disabled && !(option.selected && this.is_multiple)) {
        classes.push("disabled-result");
      }
      if (option.selected) {
        classes.push("result-selected");
      }
      if (option.group_array_index != null) {
        classes.push("group-option");
      }
      if (option.classes !== "") {
        classes.push(option.classes);
      }
      style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
      return "<li class=\"" + (classes.join(' ')) + "\"" + style + " data-option-array-index=\"" + option.array_index + "\">" + option.search_text + "</li>";
    };

    AbstractChosen.prototype.result_add_group = function(group) {
      return "<li class=\"group-result\">" + group.search_text + "</li>";
    };

    AbstractChosen.prototype.results_update_field = function() {
      this.set_default_text();
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.result_single_selected = null;
      this.results_build();
      if (this.results_showing) {
        return this.winnow_results();
      }
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.winnow_results = function() {
      var option, regex, regexAnchor, results, searchText, startpos, text, zregex, _i, _len, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.get_search_text();
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.empty) {
          if (option.group) {
            option.group_match = false;
          }
          if (!(option.group && !this.group_search)) {
            option.search_match = false;
            option.search_text = option.group ? option.label : option.html;
            option.search_match = this.search_string_match(option.search_text, regex);
            if (option.search_match) {
              results += 1;
            }
            if (option.search_match) {
              if (searchText.length) {
                startpos = option.search_text.search(zregex);
                text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              }
              if (option.group_array_index != null) {
                this.results_data[option.group_array_index].group_match = true;
              }
            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
              option.search_match = true;
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        this.update_results_content("");
        this.result_clear_highlight();
        return this.no_results(searchText);
      } else {
        this.update_results_content(this.results_option_build());
        return this.winnow_results_set_highlight();
      }
    };

    AbstractChosen.prototype.search_string_match = function(search_string, regex) {
      var part, parts, _i, _len;
      if (regex.test(search_string)) {
        return true;
      } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
        parts = search_string.replace(/\[|\]/g, "").split(" ");
        if (parts.length) {
          for (_i = 0, _len = parts.length; _i < _len; _i++) {
            part = parts[_i];
            if (regex.test(part)) {
              return true;
            }
          }
        }
      }
    };

    AbstractChosen.prototype.choices_count = function() {
      var option, _i, _len, _ref;
      if (this.selected_option_count != null) {
        return this.selected_option_count;
      }
      this.selected_option_count = 0;
      _ref = this.form_field.options;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (option.selected) {
          this.selected_option_count += 1;
        }
      }
      return this.selected_option_count;
    };

    AbstractChosen.prototype.choices_click = function(evt) {
      evt.preventDefault();
      if (!(this.results_showing || this.is_disabled)) {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.container_width = function() {
      if (this.options.width != null) {
        return this.options.width;
      } else {
        return "" + this.form_field.offsetWidth + "px";
      }
    };

    AbstractChosen.browser_is_supported = function() {
      var _ref;
      if (window.navigator.appName === "Microsoft Internet Explorer") {
        return (null !== (_ref = document.documentMode) && _ref >= 8);
      }
      return true;
    };

    AbstractChosen.default_multiple_text = "Select Some Options";

    AbstractChosen.default_single_text = "Select an Option";

    AbstractChosen.default_no_result_text = "No results match";

    return AbstractChosen;

  })();

  this.Chosen = (function(_super) {
    __extends(Chosen, _super);

    function Chosen() {
      _ref = Chosen.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Chosen.prototype.setup = function() {
      this.current_selectedIndex = this.form_field.selectedIndex;
      return this.is_rtl = DOM.has_class(this.form_field, "chzn-rtl");
    };

    Chosen.prototype.finish_setup = function() {
      return DOM.add_class(this.form_field, "chzn-done");
    };

    Chosen.prototype.set_up_html = function() {
      var container_classes, container_props, key, value;
      container_classes = ["chzn-container"];
      container_classes.push("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      if (this.inherit_select_classes && this.form_field.className) {
        container_classes.push(this.form_field.className);
      }
      if (this.is_rtl) {
        container_classes.push("chzn-rtl");
      }
      container_props = {
        'class': container_classes.join(' '),
        'style': "width: " + (this.container_width()) + ";",
        'title': this.form_field.title
      };
      if (this.form_field.id.length) {
        container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chzn";
      }
      this.container = document.createElement('div');
      for (key in container_props) {
        value = container_props[key];
        this.container.setAttribute(key, value);
      }
      if (this.is_multiple) {
        this.container.innerHTML = '<ul class="chzn-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop"><ul class="chzn-results"></ul></div>';
      } else {
        this.container.innerHTML = '<a href="javascript:void(0)" class="chzn-single chzn-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chzn-drop"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>';
      }
      this.form_field.style.display = 'none';
      this.form_field.parentNode.appendChild(this.container);
      this.dropdown = this.container.querySelector('div.chzn-drop');
      this.search_field = this.container.getElementsByTagName('input')[0];
      this.search_results = this.container.querySelector('ul.chzn-results');
      this.search_field_scale();
      this.search_no_results = this.container.querySelector('li.no-results');
      if (this.is_multiple) {
        this.search_choices = this.container.querySelector('ul.chzn-choices');
        this.search_container = this.container.querySelector('li.search-field');
      } else {
        this.search_container = this.container.querySelector('div.chzn-search');
        this.selected_item = this.container.querySelector('.chzn-single');
      }
      this.results_build();
      this.set_tab_index();
      this.set_label_behavior();
      return Events.fire(this.form_field, "liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      Events.add(this.container, 'mousedown', function(evt) {
        _this.container_mousedown(evt);
      });
      Events.add(this.container, 'mouseup', function(evt) {
        _this.container_mouseup(evt);
      });
      Events.add(this.container, 'mouseenter', function(evt) {
        _this.mouse_enter(evt);
      });
      Events.add(this.container, 'mouseleave', function(evt) {
        _this.mouse_leave(evt);
      });
      Events.add(this.search_results, "mouseup", function(evt) {
        _this.search_results_mouseup(evt);
      });
      Events.add(this.search_results, "mouseover", function(evt) {
        _this.search_results_mouseover(evt);
      });
      Events.add(this.search_results, "mouseout", function(evt) {
        _this.search_results_mouseout(evt);
      });
      Events.add(this.search_results, 'mousewheel DOMMouseScroll', function(evt) {
        _this.search_results_mousewheel(evt);
      });
      Events.add(this.form_field, "liszt:updated", function(evt) {
        _this.results_update_field(evt);
      });
      Events.add(this.form_field, "liszt:activate", function(evt) {
        _this.activate_field(evt);
      });
      Events.add(this.form_field, "liszt:open", function(evt) {
        _this.container_mousedown(evt);
      });
      Events.add(this.search_field, "blur", function(evt) {
        _this.input_blur(evt);
      });
      Events.add(this.search_field, "keyup", function(evt) {
        _this.keyup_checker(evt);
      });
      Events.add(this.search_field, "keydown", function(evt) {
        _this.keydown_checker(evt);
      });
      Events.add(this.search_field, "focus", function(evt) {
        _this.input_focus(evt);
      });
      if (this.is_multiple) {
        return Events.add(this.search_choices, "click", function(evt) {
          _this.choices_click(evt);
        });
      } else {
        return Events.add(this.container, "click", function(evt) {
          evt.preventDefault();
        });
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.form_field.disabled;
      if (this.is_disabled) {
        DOM.add_class(this.container, 'chzn-disabled');
        this.search_field.disabled = true;
        if (!this.is_multiple) {
          Events.remove(this.selected_item, "focus", this.activate_action);
        }
        return this.close_field();
      } else {
        DOM.remove_class(this.container, 'chzn-disabled');
        this.search_field.disabled = false;
        if (!this.is_multiple) {
          return Events.add(this.selected_item, "focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      if (!this.is_disabled) {
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault();
        }
        if (!((evt != null) && DOM.has_class(evt.target, "search-choice-close"))) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.value = "";
            }
            Events.add(document, "click", this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && ((evt.target === this.selected_item) || (DOM.find_parent(evt.target, function(el) {
            return DOM.has_class(el, "chzn-single");
          }) != null))) {
            evt.preventDefault();
            this.results_toggle();
          }
          return this.activate_field();
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.search_results_mousewheel = function(evt) {
      var delta, _ref1, _ref2;
      delta = -((_ref1 = evt.originalEvent) != null ? _ref1.wheelDelta : void 0) || ((_ref2 = evt.originialEvent) != null ? _ref2.detail : void 0);
      if (delta != null) {
        evt.preventDefault();
        if (evt.type === 'DOMMouseScroll') {
          delta = delta * 40;
        }
        return this.search_results.scrollTop(delta + this.search_results.scrollTop());
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && DOM.has_class(this.container, "chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      Events.remove(document, "click", this.click_test_action);
      this.active_field = false;
      this.results_hide();
      DOM.remove_class(this.container, "chzn-container-active");
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      DOM.add_class(this.container, "chzn-container-active");
      this.active_field = true;
      this.search_field.value = this.search_field.value;
      return this.search_field.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      var selected_container;
      selected_container = DOM.find_parent(evt.target.parentNode, function(el) {
        return DOM.has_class(el, 'chzn-container');
      });
      if (this.container === selected_container) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      var el, _i, _len, _ref1;
      this.parsing = true;
      this.selected_option_count = null;
      this.results_data = SelectParser.select_to_array(this.form_field);
      if (this.is_multiple) {
        _ref1 = this.search_choices.querySelectorAll("li.search-choice");
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          el = _ref1[_i];
          el.parentNode.removeChild(el);
        }
      } else if (!this.is_multiple) {
        this.single_set_selected_text();
        if (this.disable_search || this.form_field.options.length <= this.disable_search_threshold) {
          this.search_field.readOnly = true;
          DOM.add_class(this.container, "chzn-container-single-nosearch");
        } else {
          this.search_field.readOnly = false;
          DOM.remove_class(this.container, "chzn-container-single-nosearch");
        }
      }
      this.update_results_content(this.results_option_build({
        first: true
      }));
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      return this.parsing = false;
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, visible_bottom, visible_top;
      if (el != null) {
        this.result_clear_highlight();
        this.result_highlight = el;
        DOM.add_class(this.result_highlight, "highlighted");
        maxHeight = parseInt(DOM.get_style(this.search_results, 'max-height'), 10);
        visible_top = this.search_results.scrollTop;
        visible_bottom = maxHeight + visible_top;
        high_top = this.result_highlight.offsetTop;
        high_bottom = high_top + this.result_highlight.clientHeight;
        if (high_bottom >= visible_bottom) {
          return this.search_results.scrollTop = (high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0;
        } else if (high_top < visible_top) {
          return this.search_results.scrollTop = high_top;
        }
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        DOM.remove_class(this.result_highlight, "highlighted");
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
        Events.fire(this.form_field, "liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      DOM.add_class(this.container, "chzn-with-drop");
      Events.fire(this.form_field, "liszt:showing_dropdown", {
        chosen: this
      });
      this.results_showing = true;
      this.search_field.focus();
      this.search_field.value = this.search_field.value;
      return this.winnow_results();
    };

    Chosen.prototype.update_results_content = function(content) {
      return this.search_results.innerHTML = content;
    };

    Chosen.prototype.results_hide = function() {
      if (this.results_showing) {
        this.result_clear_highlight();
        DOM.remove_class(this.container, "chzn-with-drop");
        Events.fire(this.form_field, "liszt:hiding_dropdown", {
          chosen: this
        });
      }
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.form_field.tabindex) {
        ti = this.form_field.tabindex;
        this.form_field.tabindex = -1;
        return this.search_field.tabindex = ti;
      }
    };

    Chosen.prototype.set_label_behavior = function() {
      var _this = this;
      this.form_field_label = DOM.find_parent(this.form_field, function(el) {
        return el.nodeName.toUpperCase() === 'LABEL';
      });
      if ((this.form_field_label == null) && this.form_field.id.length) {
        this.form_field_label = document.querySelector("label[for='" + this.form_field.id + "']");
      }
      if (this.form_field_label != null) {
        return this.form_field_label.click(function(evt) {
          if (_this.is_multiple) {
            return _this.container_mousedown(evt);
          } else {
            return _this.activate_field();
          }
        });
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
        this.search_field.value = this.default_text;
        return DOM.add_class(this.search_field, "default");
      } else {
        this.search_field.value = "";
        return DOM.remove_class(this.search_field, "default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var target;
      target = DOM.has_class(evt.target, "active-result") ? evt.target : DOM.find_parent(evt.target, function(el) {
        return DOM.has_class(el, "active-result");
      });
      if (target != null) {
        this.result_highlight = target;
        this.result_select(evt);
        return this.search_field.focus();
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var target;
      target = DOM.has_class(evt.target, "active-result") ? evt.target : DOM.find_parent(evt.target, function(el) {
        return DOM.has_class(el, "active-result");
      });
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      if (DOM.has_class(evt.target, "active-result" || DOM.find_parent(evt.target, function(el) {
        return DOM.has_class(el, "active-result");
      }))) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice, close_link,
        _this = this;
      choice = document.createElement('li');
      choice.className = "search-choice";
      choice.innerHTML = "<span>" + item.html + "</span>";
      if (item.disabled) {
        DOM.add_class(choice, 'search-choice-disabled');
      } else {
        close_link = document.createElement('a');
        close_link.href = '#';
        close_link.className = 'search-choice-close';
        close_link.rel = item.array_index;
        Events.add(close_link, 'click', function(evt) {
          return _this.choice_destroy_link_click(evt);
        });
        choice.appendChild(close_link);
      }
      return this.search_container.parentNode.insertBefore(choice, this.search_container);
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      evt.preventDefault();
      evt.stopPropagation();
      if (!this.is_disabled) {
        return this.choice_destroy(evt.target);
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      var li;
      if (this.result_deselect(link.getAttribute("rel"))) {
        this.show_search_field_default();
        if (this.is_multiple && this.choices_count() > 0 && this.search_field.value.length < 1) {
          this.results_hide();
        }
        li = DOM.find_parent(link, function(el) {
          return el.nodeName.toUpperCase() === 'LI';
        });
        if (li != null) {
          li.parentNode.removeChild(li);
        }
        return this.search_field_scale();
      }
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      this.selected_option_count = null;
      this.single_set_selected_text();
      this.show_search_field_default();
      this.results_reset_cleanup();
      Events.fire(this.form_field, "change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      var abbr;
      this.current_selectedIndex = this.form_field.selectedIndex;
      abbr = this.selected_item.getElementsByTagName("abbr")[0];
      return abbr.parentNode.removeChild(abbr);
    };

    Chosen.prototype.result_select = function(evt) {
      var el, high, item, _i, _len, _ref1;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
          Events.fire(this.form_field, "liszt:maxselected", {
            chosen: this
          });
          return false;
        }
        if (this.is_multiple) {
          DOM.remove_class(high, "active-result");
        } else {
          _ref1 = this.search_results.querySelectorAll(".result-selected");
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            el = _ref1[_i];
            DOM.remove_class(el, "result-selected");
          }
          this.result_single_selected = high;
        }
        DOM.add_class(high, "result-selected");
        item = this.results_data[high.getAttribute("data-option-array-index")];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        this.selected_option_count = null;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          this.single_set_selected_text(item.text);
        }
        if (!((evt.metaKey || evt.ctrlKey) && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.value = "";
        if (this.is_multiple || this.form_field.selectedIndex !== this.current_selectedIndex) {
          Events.fire(this.form_field, "change", {
            'selected': this.form_field.options[item.options_index].value
          });
        }
        this.current_selectedIndex = this.form_field.selectedIndex;
        return this.search_field_scale();
      }
    };

    Chosen.prototype.single_set_selected_text = function(text) {
      if (text == null) {
        text = this.default_text;
      }
      if (text === this.default_text) {
        DOM.add_class(this.selected_item, "chzn-default");
      } else {
        this.single_deselect_control_build();
        DOM.remove_class(this.selected_item, "chzn-default");
      }
      return this.selected_item.getElementsByTagName("span")[0].textContent = text;
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result_data;
      result_data = this.results_data[pos];
      if (!this.form_field.options[result_data.options_index].disabled) {
        result_data.selected = false;
        this.form_field.options[result_data.options_index].selected = false;
        this.selected_option_count = null;
        this.result_clear_highlight();
        if (this.results_showing) {
          this.winnow_results();
        }
        Events.fire(this.form_field, "change", {
          deselected: this.form_field.options[result_data.options_index].value
        });
        this.search_field_scale();
        return true;
      } else {
        return false;
      }
    };

    Chosen.prototype.single_deselect_control_build = function() {
      var abbr, span;
      if (!this.allow_single_deselect) {
        return;
      }
      if (this.selected_item.getElementsByTagName("abbr").length === 0) {
        span = this.selected_item.getElementsByTagName('span')[0];
        abbr = document.createElement('abbr');
        abbr.className = "search-choice-close";
        span.parentNode.insertBefore(abbr, span.nextSibling);
      }
      return DOM.add_class(this.selected_item, "chzn-single-with-deselect");
    };

    Chosen.prototype.get_search_text = function() {
      if (this.search_field.value === this.default_text) {
        return "";
      } else {
        temp_el = document.createElement("div");
        temp_el.textContent = Util.trim(this.search_field.value);
        return temp_el.innerHTML;
      }
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high, selected_results;
      selected_results = !this.is_multiple ? this.search_results.querySelectorAll(".result-selected.active-result") : [];
      do_high = selected_results.length ? selected_results[0] : this.search_results.querySelector(".active-result");
      if (do_high != null) {
        return this.result_do_highlight(do_high);
      }
    };

    Chosen.prototype.no_results = function(terms) {
      var li, span;
      li = document.createElement('li');
      li.className = 'no-results';
      li.innerHTML = this.results_none_found + ' ';
      span = document.createElement('span');
      span.textContent = terms;
      li.appendChild(span);
      return this.search_results.appendChild(li);
    };

    Chosen.prototype.no_results_clear = function() {
      var no_results;
      no_results = this.search_results.querySelector(".no-results");
      if (no_results != null) {
        return no_results.parentNode.removeChild(no_results);
      }
    };

    Chosen.prototype.keydown_arrow = function() {
      var next_sib,
        _this = this;
      if (this.results_showing && this.result_highlight) {
        next_sib = DOM.find_next_sibling(this.result_highlight, function(el) {
          return el.nodeName.toUpperCase() === "LI" && DOM.has_class(el, "active-result");
        });
        if (next_sib) {
          return this.result_do_highlight(next_sib);
        }
      } else {
        return this.results_show();
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var prev_sib,
        _this = this;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        prev_sib = DOM.find_prev_sibling(this.result_highlight, function(el) {
          return el.nodeName.toUpperCase() === "LI" && DOM.has_class(el, "active-result");
        });
        if (prev_sib != null) {
          return this.result_do_highlight(prev_sib);
        } else {
          if (this.choices_count() > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var next_available_destroy, next_available_destroys;
      if (this.pending_backstroke) {
        this.choice_destroy(this.pending_backstroke.getElementsByTagName("a")[0]);
        return this.clear_backstroke();
      } else {
        next_available_destroys = this.search_container.parentNode.querySelectorAll("li.search-choice");
        if (next_available_destroys.length) {
          next_available_destroy = next_available_destroys[next_available_destroys.length - 1];
          if (!DOM.has_class(next_available_destroy, "search-choice-disabled")) {
            this.pending_backstroke = next_available_destroy;
            if (this.single_backstroke_delete) {
              return this.keydown_backstroke();
            } else {
              return DOM.add_class(this.pending_backstroke, "search-choice-focus");
            }
          }
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        DOM.remove_class(this.pending_backstroke, "search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref1;
      stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.value.length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          evt.preventDefault();
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var div, f_width, h, style, styles, w, _i, _len;
      if (this.is_multiple) {
        h = 0;
        w = 0;
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        div = document.createElement('div');
        div.style.position = 'absolute';
        div.style.left = '-1000px';
        div.style.top = '-1000px';
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          div.style[Util.camel_case(style)] = this.search_field.style[style];
        }
        div.appendChild(document.createTextNode(this.search_field.value));
        document.body.appendChild(div);
        w = div.offsetWidth + 25;
        div.parentNode.removeChild(div);
        f_width = this.container.outerWidth;
        if (w > f_width - 10) {
          w = f_width - 10;
        }
        return this.search_field.style.width = w + 'px';
      }
    };

    return Chosen;

  })(AbstractChosen);

}).call(this);
